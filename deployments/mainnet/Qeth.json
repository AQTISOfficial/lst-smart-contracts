{
  "address": "0xA0Ed5eF008557580247d3C813710B681e9cB5700",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "activator",
          "type": "address"
        }
      ],
      "name": "BuyActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "deactivator",
          "type": "address"
        }
      ],
      "name": "BuyDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "BuyTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newDistributionAddress",
          "type": "address"
        }
      ],
      "name": "DistributionAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinAmountBuy",
          "type": "uint256"
        }
      ],
      "name": "MinAmountBuyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSoftMaxSupply",
          "type": "uint256"
        }
      ],
      "name": "SoftMaxSupplyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "activator",
          "type": "address"
        }
      ],
      "name": "WhitelistActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "deactivator",
          "type": "address"
        }
      ],
      "name": "WhitelistDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        }
      ],
      "name": "WhitelistUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "apy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aqtisApy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "buyTokens",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyTokensWithEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "circulatingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cumulativeCirculatingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getRewardsFor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "usdcRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "aqtisRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cappedLSTRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRewards.RewardsDistribution",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "lastClaimTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minAmountBuy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintWithCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "resetUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_buyActive",
          "type": "bool"
        }
      ],
      "name": "setBuyActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newCap",
          "type": "uint256"
        }
      ],
      "name": "setCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_whitelisted",
          "type": "bool"
        }
      ],
      "name": "setContractRewardsWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_distributionAddress",
          "type": "address"
        }
      ],
      "name": "setDistributionAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMinAmountBuy",
          "type": "uint256"
        }
      ],
      "name": "setMinAmountBuy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsAddress",
          "type": "address"
        }
      ],
      "name": "setRewardsAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenPriceCalculator",
          "type": "address"
        }
      ],
      "name": "setTokenPriceCalculator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_whitelistActive",
          "type": "bool"
        }
      ],
      "name": "setWhitelistActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPriceCalculator",
      "outputs": [
        {
          "internalType": "contract ITokenPriceCalculator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "twaCircSupplySinceLastClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_whitelisted",
          "type": "bool"
        }
      ],
      "name": "updateWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userTWAB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedContracts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x429ea34833db21e595d8d40e78a4bbea2e74b8af398415165b6112b40bee03ca",
  "receipt": {
    "to": null,
    "from": "0x9e3c17d39bE89bbFCCf0e1A4f266C0271C05C228",
    "contractAddress": "0xA0Ed5eF008557580247d3C813710B681e9cB5700",
    "transactionIndex": 20,
    "gasUsed": "2401893",
    "logsBloom": "0x
    "blockHash": "0x1fa113f371c5ee5faf390c19c50170f7b091845f5c79b61790f2f8d27d09ec6a",
    "transactionHash": "0x429ea34833db21e595d8d40e78a4bbea2e74b8af398415165b6112b40bee03ca",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 19675365,
        "transactionHash": "0x429ea34833db21e595d8d40e78a4bbea2e74b8af398415165b6112b40bee03ca",
        "address": "0xA0Ed5eF008557580247d3C813710B681e9cB5700",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009e3c17d39be89bbfccf0e1a4f266c0271c05c228"
        ],
        "data": "0x",
        "logIndex": 79,
        "blockHash": "0x1fa113f371c5ee5faf390c19c50170f7b091845f5c79b61790f2f8d27d09ec6a"
      }
    ],
    "blockNumber": 19675365,
    "cumulativeGasUsed": "4689199",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9087a8a1961bde39b6a21ecb15b711d3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"activator\",\"type\":\"address\"}],\"name\":\"BuyActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deactivator\",\"type\":\"address\"}],\"name\":\"BuyDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"BuyTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDistributionAddress\",\"type\":\"address\"}],\"name\":\"DistributionAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinAmountBuy\",\"type\":\"uint256\"}],\"name\":\"MinAmountBuyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSoftMaxSupply\",\"type\":\"uint256\"}],\"name\":\"SoftMaxSupplyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"activator\",\"type\":\"address\"}],\"name\":\"WhitelistActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deactivator\",\"type\":\"address\"}],\"name\":\"WhitelistDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aqtisApy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokensWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativeCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRewardsFor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"usdcRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aqtisRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cappedLSTRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct IRewards.RewardsDistribution\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintWithCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"resetUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_buyActive\",\"type\":\"bool\"}],\"name\":\"setBuyActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"setContractRewardsWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributionAddress\",\"type\":\"address\"}],\"name\":\"setDistributionAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinAmountBuy\",\"type\":\"uint256\"}],\"name\":\"setMinAmountBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsAddress\",\"type\":\"address\"}],\"name\":\"setRewardsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenPriceCalculator\",\"type\":\"address\"}],\"name\":\"setTokenPriceCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_whitelistActive\",\"type\":\"bool\"}],\"name\":\"setWhitelistActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceCalculator\",\"outputs\":[{\"internalType\":\"contract ITokenPriceCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"twaCircSupplySinceLastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userTWAB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"A Q T I S / @AQTIS-Team\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawERC20(address)\":{\"params\":{\"token\":\"The address of the ERC20 token to withdraw\"}}},\"title\":\"Quant Ethereum Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"withdrawERC20(address)\":{\"notice\":\"Allows the owner to withdraw any ERC20 token from the contract\"},\"withdrawETH()\":{\"notice\":\"Allows the owner to withdraw stuck ETH from the contract\"}},\"notice\":\"This contract handles tokenomics for qETH\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lst/Qeth.sol\":\"Qeth\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/interfaces/IRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IRewards {\\n    struct RewardsDistribution {\\n        uint256 usdcRewards;\\n        uint256 ethRewards;\\n        uint256 aqtisRewards;\\n        uint256 cappedLSTRewards;\\n    }\\n\\n    function getRewardsFor(address user) external view returns (RewardsDistribution memory);\\n\\n    function resetUser(address user) external;\\n\\n    function twaCircSupplySinceLastClaim(address user) external view returns (uint);\\n\\n    function circulatingSupply() external view returns (uint);\\n\\n    function cumulativeCirculatingSupply() external view returns (uint);\\n\\n    function userTWAB(address user) external view returns (uint);\\n\\n    function lastClaimTime(address user) external view returns (uint);\\n}\",\"keccak256\":\"0xa86289e06fc55ec94ad472de1501d940857f0d21127dc88dedd795aabb779a58\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenPriceCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\n/**\\n * @title Token Price Calculator Interface\\n * @notice Interface for token price calculator\\n */\\ninterface ITokenPriceCalculator {\\n    function update() external;\\n\\n    function getAqtisPriceInWETH() external view returns (uint256);\\n    function getAqtisPriceInUSD() external view returns (uint256);\\n\\n    function getLatestUsdPrice() external view returns (uint256);\\n    function getLatestEthPrice() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe4287d58ceb49c40c481674087fddfd1e30d2cb1cecdff76904d791d5e9a178f\",\"license\":\"MIT\"},\"contracts/lst/AbstractLST.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {PseudoCappedERC20} from \\\"../token/PseudoCappedERC20.sol\\\";\\n\\n/**\\n * @title Abstract LSD Contract\\n * @author A Q T I S / @AQTIS-Team\\n * @notice This contract provides the LSD tokenomics\\n */\\n\\nabstract contract AbstractLST is PseudoCappedERC20, Ownable, ReentrancyGuard {\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    // ======= Roles ======= //\\n    address public distributionAddress;\\n\\n    // ======= State Variables ======= //\\n    bool public buyActive;\\n    bool public whitelistActive;\\n    uint256 public minAmountBuy;\\n\\n    mapping(address => bool) public whitelist;\\n\\n    // ======= Event Logs ======= //\\n    event BuyTokens(address indexed user, uint256 amount, uint256 newTotalSupply);\\n    event SoftMaxSupplyChanged(uint256 newSoftMaxSupply);\\n\\n    event MinAmountBuyChanged(uint256 newMinAmountBuy);\\n    event BuyActivated(address indexed activator);\\n    event BuyDeactivated(address indexed deactivator);\\n\\n    event WhitelistActivated(address indexed activator);\\n    event WhitelistDeactivated(address indexed deactivator);\\n    event WhitelistUpdated(address indexed addr, bool whitelisted);\\n    event DistributionAddressUpdated(address indexed newDistributionAddress);\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _totalMaxSupply\\n    ) PseudoCappedERC20(_name, _symbol, _totalMaxSupply) Ownable(msg.sender) {}\\n\\n    // ======= Setters ======= //\\n\\n    function setMinAmountBuy(uint256 _newMinAmountBuy) external onlyOwner {\\n        require(_newMinAmountBuy > 0, \\\"Min amount buy must be greater than 0\\\");\\n        minAmountBuy = _newMinAmountBuy;\\n        emit MinAmountBuyChanged(_newMinAmountBuy);\\n    }\\n\\n    function setBuyActive(bool _buyActive) external onlyOwner {\\n        buyActive = _buyActive;\\n        if (_buyActive) {\\n            emit BuyActivated(msg.sender);\\n        } else {\\n            emit BuyDeactivated(msg.sender);\\n        }\\n    }\\n\\n    function setWhitelistActive(bool _whitelistActive) external onlyOwner {\\n        whitelistActive = _whitelistActive;\\n        if (_whitelistActive) {\\n            emit WhitelistActivated(msg.sender);\\n        } else {\\n            emit WhitelistDeactivated(msg.sender);\\n        }\\n    }\\n\\n    function updateWhitelist(address _addr, bool _whitelisted) external onlyOwner {\\n        whitelist[_addr] = _whitelisted;\\n        emit WhitelistUpdated(_addr, _whitelisted);\\n    }\\n\\n    function setDistributionAddress(address _distributionAddress) external onlyOwner {\\n        distributionAddress = _distributionAddress;\\n        emit DistributionAddressUpdated(_distributionAddress);\\n    }\\n\\n    function setCap(uint256 _newCap) external onlyOwner {\\n        _setCap(_newCap);\\n        emit SoftMaxSupplyChanged(_newCap);\\n    }\\n\\n    // ======= Modifiers ======= //\\n    modifier onlyBuyActive() {\\n        require(buyActive, \\\"Abstract LST: buy not active\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhitelist() {\\n        if (whitelistActive) {\\n            require(whitelist[msg.sender], \\\"Abstract LST: caller is not whitelisted\\\");\\n        }\\n        _;\\n    }\\n\\n    // ======= Abstract Functions ======= //\\n    function buyTokensWithEth() external virtual payable;\\n\\n    function buyTokens(uint amount) external virtual;\\n\\n    // only for rewards address\\n    function mint(uint amount) external virtual;\\n    function mintWithCap(uint amount) external virtual;\\n\\n    function setRewardsAddress(address _rewardsAddress) external virtual;\\n    function setTokenPriceCalculator(address _tokenPriceCalculator) external virtual;\\n\\n    // ======= Internal Functions ======= //\\n    function _forwardEth(uint256 _amount) internal {\\n        require(distributionAddress != address(0), \\\"Abstract LST: distributor address not set\\\");\\n        require(_amount > 0, \\\"Abstract LST: amount must be greater than 0\\\");\\n\\n        Address.sendValue(payable(distributionAddress), _amount);\\n    }\\n\\n    function _forwardERC20(address _token, uint256 _amount) internal {\\n        require(_token != address(0), \\\"Abstract LST: token address cannot be the zero address\\\");\\n        require(_amount > 0, \\\"Abstract LST: amount must be greater than 0\\\");\\n        IERC20(_token).safeTransfer(distributionAddress, _amount);\\n    }\\n\\n    function _afterBuy(address _user, uint256 _amount) internal {\\n        emit BuyTokens(_user, _amount, totalSupply());\\n    }\\n\\n    // ======= External Functions ======= //\\n\\n    /// @notice Allows the owner to withdraw stuck ETH from the contract\\n    function withdrawETH() external onlyOwner {\\n        require(owner() != address(0), \\\"AbstractLST: owner cannot be the zero address\\\");\\n        Address.sendValue(payable(owner()), address(this).balance);\\n    }\\n\\n    /// @notice Allows the owner to withdraw any ERC20 token from the contract\\n    /// @param token The address of the ERC20 token to withdraw\\n    function withdrawERC20(address token) external onlyOwner {\\n        require(owner() != address(0), \\\"AbstractLST: owner cannot be the zero address\\\");\\n        IERC20(token).safeTransfer(owner(), IERC20(token).balanceOf(address(this)));\\n    }\\n}\",\"keccak256\":\"0xcb4647702030736434f385659131140dea97b4d48217f21238faedcd59f42aad\",\"license\":\"MIT\"},\"contracts/lst/Qeth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport {AbstractLST} from \\\"./AbstractLST.sol\\\";\\nimport {QethRewards} from \\\"./rewards/QethRewards.sol\\\";\\n\\n/**\\n * @title Quant Ethereum Contract\\n * @author A Q T I S / @AQTIS-Team\\n * @notice This contract handles tokenomics for qETH\\n */\\n\\n// ======= qETH Contract ======= //\\ncontract Qeth is AbstractLST, QethRewards {\\n    constructor()\\n        // (name, symbol, totalMaxSupply, 10 %apy, 2.5%aqtisApy)\\n        AbstractLST(\\\"qETH\\\", \\\"qETH\\\", 50_000 * 1e18)\\n        QethRewards(100, 25)\\n    {}\\n\\n    function buyTokensWithEth() external override payable onlyBuyActive onlyWhitelist {\\n        uint tokensToMint = msg.value;\\n\\n        // validate buy\\n        require(!_exceedsCap(tokensToMint), \\\"Qeth: Buy exceeds cap\\\");\\n        require(msg.value >= minAmountBuy, \\\"Qeth: Insufficient buy amount\\\");\\n\\n        // execute buy\\n        _mint(msg.sender, tokensToMint);\\n        _forwardEth(msg.value);\\n        _afterBuy(msg.sender, tokensToMint);\\n    }\\n\\n    function buyTokens(uint /*amount*/) external override view onlyBuyActive onlyWhitelist {\\n        require(false, \\\"Qeth: Buying with tokens is not allowed\\\");\\n    }\\n\\n    // ======= Permissioned Functions ======= //\\n    function mint(uint amount) external override onlyRewards {\\n        _mint(msg.sender, amount);\\n    }\\n\\n    function mintWithCap(uint amount) external override onlyRewards {\\n        require(!_exceedsCap(amount), \\\"Qeth: Mint exceeds cap\\\");\\n        _mint(msg.sender, amount);\\n    }\\n\\n    function setRewardsAddress(address _rewardsAddress) external override onlyOwner {\\n        _setRewardsAddress(_rewardsAddress);\\n    }\\n\\n    function setContractRewardsWhitelist(address _contract, bool _whitelisted) external onlyOwner {\\n        _setWhitelistedContract(_contract, _whitelisted);\\n    }\\n\\n    function setTokenPriceCalculator(address _tokenPriceCalculator) external override onlyOwner {\\n        _setTokenPriceCalculator(_tokenPriceCalculator);\\n    }\\n\\n    // ======= Override Functions ======= //\\n    function _update(address from, address to, uint256 value) internal virtual override {\\n        super._update(from, to, value);\\n\\n        _updateRecord(from, value, Update.FROM);\\n        _updateRecord(to, value, Update.TO);\\n    }\\n}\\n\",\"keccak256\":\"0x1ee08515c701e90eb76d10146219bcea1c59112d848e770a07e2732e8858bfaa\",\"license\":\"MIT\"},\"contracts/lst/rewards/AbstractRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IRewards} from \\\"../../interfaces/IRewards.sol\\\";\\nimport {ITokenPriceCalculator} from \\\"../../interfaces/ITokenPriceCalculator.sol\\\";\\n\\nabstract contract AbstractRewards is IRewards {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    enum Update {FROM, TO}\\n\\n    struct UserRecord {\\n        uint256 userBalance;\\n        uint256 lastUpdateTime;\\n        uint256 cumulativeBalance;\\n        uint256 cumCirculatingSupplyLastClaim;\\n        uint256 lastClaimTime;\\n    }\\n\\n    // ======= Dependencies ======= //\\n    address public rewardsAddress;\\n    ITokenPriceCalculator public tokenPriceCalculator;\\n\\n    // ======= State Variables ======= //\\n    uint public immutable apy;\\n    uint public immutable aqtisApy;\\n    uint public constant DENOMINATOR = 1000;\\n\\n    struct Supply {\\n        uint totalSupply;\\n        uint lastUpdateTime;\\n        uint currentCirculatingSupply;\\n        uint cumulativeCirculatingSupply;\\n    }\\n\\n    Supply internal _supply;\\n    mapping(address => bool) public whitelistedContracts;\\n\\n    constructor(uint _apy, uint _aqtisApy) {\\n        apy = _apy;\\n        aqtisApy = _aqtisApy;\\n    }\\n\\n    modifier onlyRewards {\\n        require(msg.sender == rewardsAddress, \\\"Rewards: Only rewards contract can call this function\\\");\\n        _;\\n    }\\n\\n    // ======= State Variables ======= //\\n    mapping(address => UserRecord) internal _userRecords;\\n\\n    // ======= Setters Variables ======= //\\n    function _setRewardsAddress(address _rewardsAddress) internal {\\n        rewardsAddress = _rewardsAddress;\\n    }\\n\\n    function _setTokenPriceCalculator(address _tokenPriceCalculator) internal {\\n        tokenPriceCalculator = ITokenPriceCalculator(_tokenPriceCalculator);\\n    }\\n\\n    // ======= Abstract Functions ======= //\\n\\n    function getRewardsFor(address user) external view virtual returns (RewardsDistribution memory);\\n\\n    function _beforeUpdate(address user, uint256 value, Update updateType) internal virtual;\\n\\n    function _beforeReset(address user) internal virtual;\\n\\n    // ======= External Functions ======= //\\n\\n    function resetUser(address user) external onlyRewards {\\n        _resetUser(user);\\n    }\\n\\n    // ======= Internal Functions ======= //\\n    function _updateSupply(address user, uint256 value, Update updateType) internal {\\n        uint updateDiff = block.timestamp - _supply.lastUpdateTime;\\n        _supply.cumulativeCirculatingSupply += _supply.currentCirculatingSupply * updateDiff;\\n\\n        // handle mint and burn\\n        if (user == address(0)) {\\n            if (updateType == Update.FROM) {\\n                _supply.totalSupply += value;\\n            } else if (updateType == Update.TO) {\\n                _supply.totalSupply -= value;\\n            }\\n        }\\n\\n        bool userIsContract = isContract(user);\\n        if (userIsContract && _userRecords[user].userBalance != 0) {\\n            // adjust circulating supply by remaining contract balance\\n            if (updateType == Update.FROM)\\n                _supply.currentCirculatingSupply -= (_userRecords[user].userBalance - value);\\n            else if (updateType == Update.TO) {\\n                _supply.currentCirculatingSupply -= (_userRecords[user].userBalance + value);\\n            }\\n            delete _userRecords[user];\\n        } else if (updateType == Update.FROM && (user == address(0) || userIsContract)) {\\n            _supply.currentCirculatingSupply += value;\\n        } else if (updateType == Update.TO && (user == address(0) || userIsContract)) {\\n            _supply.currentCirculatingSupply -= value;\\n        }\\n        _supply.lastUpdateTime = block.timestamp;\\n    }\\n\\n    function _updateRecord(address user, uint256 value, Update updateType) internal {\\n        _beforeUpdate(user, value, updateType);\\n\\n        _updateSupply(user, value, updateType);\\n\\n        if (user == address(0) || isContract(user)) {\\n            return;\\n        }\\n\\n        UserRecord storage record = _userRecords[user];\\n        uint256 timeElapsed = 0;\\n\\n        // First entry check\\n        if (record.lastUpdateTime == 0) {\\n            record.cumulativeBalance = 0;\\n            record.cumCirculatingSupplyLastClaim = _supply.cumulativeCirculatingSupply;\\n            record.lastClaimTime = block.timestamp;\\n        } else {\\n            timeElapsed = block.timestamp - record.lastUpdateTime;\\n            record.cumulativeBalance += record.userBalance * timeElapsed;\\n        }\\n\\n        // Update balance and last update time\\n        if (updateType == Update.FROM) {\\n            record.userBalance -= value;\\n        } else {\\n            record.userBalance += value;\\n        }\\n        record.lastUpdateTime = block.timestamp;\\n    }\\n\\n    function _getTWAB(address user) internal view returns (uint256) {\\n        UserRecord memory record = _userRecords[user];\\n        uint256 claimTime = block.timestamp - record.lastClaimTime;\\n        if (claimTime == 0) {\\n            return 0;\\n        }\\n\\n        uint256 timeDifference = block.timestamp - record.lastUpdateTime;\\n        return (record.cumulativeBalance + (record.userBalance * timeDifference)) / claimTime;\\n    }\\n\\n    function _resetUser(address user) internal {\\n        _beforeReset(user);\\n        UserRecord storage record = _userRecords[user];\\n        record.lastClaimTime = block.timestamp;\\n        record.lastUpdateTime = block.timestamp;\\n        record.cumulativeBalance = 0;\\n        record.cumCirculatingSupplyLastClaim = cumulativeCirculatingSupply();\\n    }\\n\\n    function _setWhitelistedContract(address _contract, bool _isWhitelisted) internal {\\n        whitelistedContracts[_contract] = _isWhitelisted;\\n    }\\n\\n    // ======= Public View Functions ======= //\\n    function twaCircSupplySinceLastClaim(address user) public view returns (uint) {\\n        UserRecord memory record = _userRecords[user];\\n        uint claimTime = block.timestamp - record.lastClaimTime;\\n        require(claimTime > 0, \\\"Rewards: Claim time is 0\\\");\\n\\n        return (cumulativeCirculatingSupply() - record.cumCirculatingSupplyLastClaim) / claimTime;\\n    }\\n\\n    function circulatingSupply() public view returns (uint) {\\n        return _supply.currentCirculatingSupply;\\n    }\\n\\n    function cumulativeCirculatingSupply() public view returns (uint){\\n        uint updateDiff = block.timestamp - _supply.lastUpdateTime;\\n        return _supply.cumulativeCirculatingSupply + _supply.currentCirculatingSupply * updateDiff;\\n    }\\n\\n    function userTWAB(address user) external view returns (uint) {\\n        return _getTWAB(user);\\n    }\\n\\n    function lastClaimTime(address user) external view returns (uint) {\\n        return _userRecords[user].lastClaimTime;\\n    }\\n\\n    // ======= Utils ======= //\\n    function isContract(address addr) internal view returns (bool) {\\n        if (whitelistedContracts[addr]) {\\n            return false;\\n        }\\n        uint size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size > 0;\\n    }\\n\\n}\",\"keccak256\":\"0x7d67b12d5b5913c6203dd3fc1684c9765ce7dd1711877a6137ffa48afbd8b03f\",\"license\":\"MIT\"},\"contracts/lst/rewards/QethRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport {AbstractRewards} from \\\"./AbstractRewards.sol\\\";\\n\\ncontract QethRewards is AbstractRewards {\\n\\n    constructor(uint _apy, uint _aqtisApy) AbstractRewards(_apy, _aqtisApy){}\\n\\n    function getRewardsFor(address user) external view override returns (RewardsDistribution memory) {\\n        uint256 twab = _getTWAB(user);\\n        uint timeSinceClaim = block.timestamp - _userRecords[user].lastClaimTime;\\n\\n        uint ethRewards = ((apy - aqtisApy) * twab * timeSinceClaim) / (DENOMINATOR * 365 days);\\n        uint aqtisRewards = _getAqtisRewards(twab, timeSinceClaim);\\n\\n        return RewardsDistribution(0, ethRewards, aqtisRewards, 0);\\n    }\\n\\n    function _beforeUpdate(address user, uint256 value, Update updateType) internal override {\\n        // Do nothing\\n    }\\n\\n    function _beforeReset(address user) internal override {\\n        // Do nothing\\n    }\\n\\n    function _getAqtisRewards(uint twab, uint duration) internal view returns (uint) {\\n        uint aqtisPrice = tokenPriceCalculator.getAqtisPriceInWETH();\\n        return (aqtisApy * twab * duration * 1e18) / (DENOMINATOR * 365 days * aqtisPrice);\\n    }\\n}\",\"keccak256\":\"0xe6975f6483a72caab5f783f700c08e7305063d7d5ea32efc5c2b95feb432be57\",\"license\":\"MIT\"},\"contracts/token/PseudoCappedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title PseudoCappedERC20 Contract\\n * @author A Q T I S / @AQTIS-Team\\n * @notice This contract provides the base functionality for a soft-capped ERC20 token\\n */\\n\\ncontract PseudoCappedERC20 is ERC20 {\\n    uint256 internal _cap;\\n\\n    constructor(\\n        string memory __name,\\n        string memory __symbol,\\n        uint256 __cap\\n    )\\n        ERC20(__name, __symbol)\\n    {\\n        _cap = __cap;\\n    }\\n\\n    function _setCap(uint256 __newCap) internal {\\n        _cap = __newCap;\\n    }\\n\\n    function _exceedsCap(uint256 amount) internal view returns (bool) {\\n        return totalSupply() + amount > _cap;\\n    }\\n\\n    function cap() external view returns (uint256) {\\n        return _cap;\\n    }\\n}\",\"keccak256\":\"0xa825f9e22e23eaf48e8bd7ef93e4cf2f266eecc68de46d1006f2a91b8dada59f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50606460198181604051806040016040528060048152602001630e28aa8960e31b815250604051806040016040528060048152602001630e28aa8960e31b815250690a968163f0a57b4000003383838382828160039081620000749190620001d9565b506004620000838282620001d9565b50505060055550506001600160a01b038116620000ba57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b620000c581620000e0565b50506001600755505060809190915260a05250620002a59050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200015d57607f821691505b6020821081036200017e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001d4576000816000526020600020601f850160051c81016020861015620001af5750805b601f850160051c820191505b81811015620001d057828155600101620001bb565b5050505b505050565b81516001600160401b03811115620001f557620001f562000132565b6200020d8162000206845462000148565b8462000184565b602080601f8311600181146200024557600084156200022c5750858301515b600019600386901b1c1916600185901b178555620001d0565b600085815260208120601f198616915b82811015620002765788860151825594840194600190910190840162000255565b5085821015620002955787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05161285d620002e06000396000818161080b01528181610adf01526118da0152600081816105190152610b00015261285d6000f3fe6080604052600436106102fd5760003560e01c806393dd451e1161018f578063c3b754dc116100e1578063e34735801161008a578063f4f3b20011610064578063f4f3b200146108f0578063f89b764414610910578063fed1280b1461093057600080fd5b8063e347358014610890578063eb45261a146108b0578063f2fde38b146108d057600080fd5b8063d87744cf116100bb578063d87744cf1461082d578063dd62ed3e14610835578063e086e5ec1461087b57600080fd5b8063c3b754dc146107b9578063ccdfff53146107d9578063d34fd412146107f957600080fd5b8063a11a1add11610143578063b77cf9c61161011d578063b77cf9c614610740578063b89fc89e14610779578063c0973eed1461079957600080fd5b8063a11a1add146106df578063a9059cbb14610700578063a9c8d4881461072057600080fd5b80639b19251a116101745780639b19251a146106795780639bdd940c146106a9578063a0712d68146106bf57600080fd5b806393dd451e1461064457806395d89b411461066457600080fd5b806337fb7e211161025357806370a08231116101fc5780638da5cb5b116101d65780638da5cb5b146105fb578063918f8674146106195780639358928b1461062f57600080fd5b806370a0823114610590578063715018a6146105c65780638906758d146105db57600080fd5b806347786d371161022d57806347786d371461053b5780634fbee1241461055b5780636aae22031461057057600080fd5b806337fb7e211461049f578063391feebb146104d75780633bcfc4b81461050757600080fd5b80632260b83e116102b5578063343959b41161028f578063343959b41461044a578063355274ea1461046a5780633610724e1461047f57600080fd5b80632260b83e146103bb57806323b872dd1461040e578063313ce5671461042e57600080fd5b8063095ea7b3116102e6578063095ea7b31461035a5780630d392cd91461037a57806318160ddd1461039c57600080fd5b806302ce58131461030257806306fdde0314610338575b600080fd5b34801561030e57600080fd5b5060085461032390600160a81b900460ff1681565b60405190151581526020015b60405180910390f35b34801561034457600080fd5b5061034d610950565b60405161032f9190612592565b34801561036657600080fd5b506103236103753660046125e1565b6109e2565b34801561038657600080fd5b5061039a610395366004612619565b6109fc565b005b3480156103a857600080fd5b506002545b60405190815260200161032f565b3480156103c757600080fd5b506103db6103d6366004612650565b610a64565b60405161032f91908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b34801561041a57600080fd5b5061032361042936600461266b565b610b80565b34801561043a57600080fd5b506040516012815260200161032f565b34801561045657600080fd5b5061039a610465366004612650565b610ba6565b34801561047657600080fd5b506005546103ad565b34801561048b57600080fd5b5061039a61049a3660046126a7565b610c37565b3480156104ab57600080fd5b506008546104bf906001600160a01b031681565b6040516001600160a01b03909116815260200161032f565b3480156104e357600080fd5b506103236104f2366004612650565b60116020526000908152604090205460ff1681565b34801561051357600080fd5b506103ad7f000000000000000000000000000000000000000000000000000000000000000081565b34801561054757600080fd5b5061039a6105563660046126a7565b610d7f565b34801561056757600080fd5b506103ad610dc7565b34801561057c57600080fd5b5061039a61058b366004612650565b610dfd565b34801561059c57600080fd5b506103ad6105ab366004612650565b6001600160a01b031660009081526020819052604090205490565b3480156105d257600080fd5b5061039a610e30565b3480156105e757600080fd5b5061039a6105f6366004612650565b610e44565b34801561060757600080fd5b506006546001600160a01b03166104bf565b34801561062557600080fd5b506103ad6103e881565b34801561063b57600080fd5b50600f546103ad565b34801561065057600080fd5b5061039a61065f3660046126a7565b610e77565b34801561067057600080fd5b5061034d610f57565b34801561068557600080fd5b50610323610694366004612650565b600a6020526000908152604090205460ff1681565b3480156106b557600080fd5b506103ad60095481565b3480156106cb57600080fd5b5061039a6106da3660046126a7565b610f66565b3480156106eb57600080fd5b5060085461032390600160a01b900460ff1681565b34801561070c57600080fd5b5061032361071b3660046125e1565b610fe6565b34801561072c57600080fd5b5061039a61073b3660046126a7565b610ff4565b34801561074c57600080fd5b506103ad61075b366004612650565b6001600160a01b031660009081526012602052604090206004015490565b34801561078557600080fd5b5061039a610794366004612650565b6110a7565b3480156107a557600080fd5b50600b546104bf906001600160a01b031681565b3480156107c557600080fd5b5061039a6107d43660046126c0565b611106565b3480156107e557600080fd5b5061039a6107f43660046126c0565b6111a7565b34801561080557600080fd5b506103ad7f000000000000000000000000000000000000000000000000000000000000000081565b61039a611248565b34801561084157600080fd5b506103ad6108503660046126dd565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561088757600080fd5b5061039a6113e8565b34801561089c57600080fd5b506103ad6108ab366004612650565b61148b565b3480156108bc57600080fd5b5061039a6108cb366004612619565b611496565b3480156108dc57600080fd5b5061039a6108eb366004612650565b6114ca565b3480156108fc57600080fd5b5061039a61090b366004612650565b61151e565b34801561091c57600080fd5b50600c546104bf906001600160a01b031681565b34801561093c57600080fd5b506103ad61094b366004612650565b61164d565b60606003805461095f90612710565b80601f016020809104026020016040519081016040528092919081815260200182805461098b90612710565b80156109d85780601f106109ad576101008083540402835291602001916109d8565b820191906000526020600020905b8154815290600101906020018083116109bb57829003601f168201915b5050505050905090565b6000336109f0818585611729565b60019150505b92915050565b610a0461173b565b6001600160a01b0382166000818152600a6020908152604091829020805460ff191685151590811790915591519182527ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d91015b60405180910390a25050565b610a8f6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000610a9a83611781565b6001600160a01b03841660009081526012602052604081206004015491925090610ac49042612760565b90506000610ad86103e86301e13380612773565b8284610b247f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612760565b610b2e9190612773565b610b389190612773565b610b42919061278a565b90506000610b50848461183c565b90506040518060800160405280600081526020018381526020018281526020016000815250945050505050919050565b600033610b8e85828561191a565b610b998585856119b1565b60019150505b9392505050565b600b546001600160a01b03163314610c2b5760405162461bcd60e51b815260206004820152603560248201527f526577617264733a204f6e6c79207265776172647320636f6e7472616374206360448201527f616e2063616c6c20746869732066756e6374696f6e000000000000000000000060648201526084015b60405180910390fd5b610c3481611a29565b50565b600854600160a01b900460ff16610c905760405162461bcd60e51b815260206004820152601c60248201527f4162737472616374204c53543a20627579206e6f7420616374697665000000006044820152606401610c22565b600854600160a81b900460ff1615610d1157336000908152600a602052604090205460ff16610d115760405162461bcd60e51b815260206004820152602760248201527f4162737472616374204c53543a2063616c6c6572206973206e6f742077686974604482015266195b1a5cdd195960ca1b6064820152608401610c22565b60405162461bcd60e51b815260206004820152602760248201527f516574683a20427579696e67207769746820746f6b656e73206973206e6f742060448201527f616c6c6f776564000000000000000000000000000000000000000000000000006064820152608401610c22565b610d8761173b565b610d9081600555565b6040518181527fb42dbc56569dad594f79a8fa479f0b9b87b68602d1b8fc221d10b62bf703dbed906020015b60405180910390a150565b600e546000908190610dd99042612760565b600f54909150610dea908290612773565b601054610df791906127ac565b91505090565b610e0561173b565b600c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b610e3861173b565b610e426000611a67565b565b610e4c61173b565b600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b600b546001600160a01b03163314610ef75760405162461bcd60e51b815260206004820152603560248201527f526577617264733a204f6e6c79207265776172647320636f6e7472616374206360448201527f616e2063616c6c20746869732066756e6374696f6e00000000000000000000006064820152608401610c22565b610f0081611ac6565b15610f4d5760405162461bcd60e51b815260206004820152601660248201527f516574683a204d696e74206578636565647320636170000000000000000000006044820152606401610c22565b610c343382611ae6565b60606004805461095f90612710565b600b546001600160a01b03163314610f4d5760405162461bcd60e51b815260206004820152603560248201527f526577617264733a204f6e6c79207265776172647320636f6e7472616374206360448201527f616e2063616c6c20746869732066756e6374696f6e00000000000000000000006064820152608401610c22565b6000336109f08185856119b1565b610ffc61173b565b600081116110725760405162461bcd60e51b815260206004820152602560248201527f4d696e20616d6f756e7420627579206d7573742062652067726561746572207460448201527f68616e20300000000000000000000000000000000000000000000000000000006064820152608401610c22565b60098190556040518181527f4d02ac2bfe90115b91d59c32ad6d07ea86d935aedb62055d844decbc0a6cb47190602001610dbc565b6110af61173b565b6008805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f8125853d25d6f68e074fb323e9f6e68b582733c9f03a78a2fda62e81d5d594f490600090a250565b61110e61173b565b6008805482158015600160a81b027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff909216919091179091556111795760405133907fe17ac05ff4095c2a1b270ddc6f70ea762311620bf4be3b1c2b0a9f4d5b16a53390600090a250565b60405133907f5a5fb1bb60b955fafbedf12a782cf1135ba3f37b851d547e79c04e55d1d9a2bb90600090a250565b6111af61173b565b6008805482158015600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9092169190911790915561121a5760405133907f414deba86f382e3da8ecf26ff472fe712d2e8489ed191afbb662b3d720cb4b4590600090a250565b60405133907fb474c7aee2343d3d4a0a18ecf7798a53688ce4d25cab70fbad7ea88866e881a590600090a250565b600854600160a01b900460ff166112a15760405162461bcd60e51b815260206004820152601c60248201527f4162737472616374204c53543a20627579206e6f7420616374697665000000006044820152606401610c22565b600854600160a81b900460ff161561132257336000908152600a602052604090205460ff166113225760405162461bcd60e51b815260206004820152602760248201527f4162737472616374204c53543a2063616c6c6572206973206e6f742077686974604482015266195b1a5cdd195960ca1b6064820152608401610c22565b3461132c81611ac6565b156113795760405162461bcd60e51b815260206004820152601560248201527f516574683a2042757920657863656564732063617000000000000000000000006044820152606401610c22565b6009543410156113cb5760405162461bcd60e51b815260206004820152601d60248201527f516574683a20496e73756666696369656e742062757920616d6f756e740000006044820152606401610c22565b6113d53382611ae6565b6113de34611b1c565b610c343382611c26565b6113f061173b565b60006114046006546001600160a01b031690565b6001600160a01b0316036114705760405162461bcd60e51b815260206004820152602d60248201527f41627374726163744c53543a206f776e65722063616e6e6f742062652074686560448201526c207a65726f206164647265737360981b6064820152608401610c22565b610e426114856006546001600160a01b031690565b47611c70565b60006109f682611781565b61149e61173b565b6001600160a01b0382166000908152601160205260409020805460ff19168215151790555050565b5050565b6114d261173b565b6001600160a01b038116611515576040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152602401610c22565b610c3481611a67565b61152661173b565b600061153a6006546001600160a01b031690565b6001600160a01b0316036115a65760405162461bcd60e51b815260206004820152602d60248201527f41627374726163744c53543a206f776e65722063616e6e6f742062652074686560448201526c207a65726f206164647265737360981b6064820152608401610c22565b610c346115bb6006546001600160a01b031690565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015611618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163c91906127bf565b6001600160a01b0384169190611d07565b6001600160a01b0381166000908152601260209081526040808320815160a0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600401546080820181905282906116ad9042612760565b9050600081116116ff5760405162461bcd60e51b815260206004820152601860248201527f526577617264733a20436c61696d2074696d65206973203000000000000000006044820152606401610c22565b80826060015161170d610dc7565b6117179190612760565b611721919061278a565b949350505050565b6117368383836001611d87565b505050565b6006546001600160a01b03163314610e42576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610c22565b6001600160a01b0381166000908152601260209081526040808320815160a0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600401546080820181905282906117e19042612760565b9050806000036117f5575060009392505050565b60008260200151426118079190612760565b90508181846000015161181a9190612773565b846040015161182991906127ac565b611833919061278a565b95945050505050565b600080600c60009054906101000a90046001600160a01b03166001600160a01b0316638df7756f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b691906127bf565b9050806118c96103e86301e13380612773565b6118d39190612773565b836118fe867f0000000000000000000000000000000000000000000000000000000000000000612773565b6119089190612773565b61171790670de0b6b3a7640000612773565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146119ab578181101561199c576040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024810182905260448101839052606401610c22565b6119ab84848484036000611d87565b50505050565b6001600160a01b0383166119f4576040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260006004820152602401610c22565b6001600160a01b038216611a1e5760405163ec442f0560e01b815260006004820152602401610c22565b611736838383611e8e565b6001600160a01b0381166000908152601260205260408120426004820181905560018201556002810191909155611a5e610dc7565b60039091015550565b600680546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060055482611ad560025490565b611adf91906127ac565b1192915050565b6001600160a01b038216611b105760405163ec442f0560e01b815260006004820152602401610c22565b6114c660008383611e8e565b6008546001600160a01b0316611b9a5760405162461bcd60e51b815260206004820152602960248201527f4162737472616374204c53543a206469737472696275746f722061646472657360448201527f73206e6f742073657400000000000000000000000000000000000000000000006064820152608401610c22565b60008111611c105760405162461bcd60e51b815260206004820152602b60248201527f4162737472616374204c53543a20616d6f756e74206d7573742062652067726560448201527f61746572207468616e20300000000000000000000000000000000000000000006064820152608401610c22565b600854610c34906001600160a01b031682611c70565b816001600160a01b03167f0a37b72bb67eee30e09084cf386f8a17817c57f620c3ab95fb25d6a20356ec7782611c5b60025490565b60408051928352602083019190915201610a58565b80471015611c935760405163cd78605960e01b8152306004820152602401610c22565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611ce0576040519150601f19603f3d011682016040523d82523d6000602084013e611ce5565b606091505b505090508061173657604051630a12f52160e11b815260040160405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611736908490611eb1565b6001600160a01b038416611dca576040517fe602df0500000000000000000000000000000000000000000000000000000000815260006004820152602401610c22565b6001600160a01b038316611e0d576040517f94280d6200000000000000000000000000000000000000000000000000000000815260006004820152602401610c22565b6001600160a01b03808516600090815260016020908152604080832093871683529290522082905580156119ab57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051611e8091815260200190565b60405180910390a350505050565b611e99838383611f2d565b611ea583826000612070565b61173682826001612070565b6000611ec66001600160a01b03841683612176565b90508051600014158015611eeb575080806020019051810190611ee991906127d8565b155b15611736576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610c22565b6001600160a01b038316611f58578060026000828254611f4d91906127ac565b90915550611fe39050565b6001600160a01b03831660009081526020819052604090205481811015611fc4576040517fe450d38c0000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024810182905260448101839052606401610c22565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b038216611fff5760028054829003905561201e565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161206391815260200190565b60405180910390a3505050565b61207b838383612184565b6001600160a01b0383161580612095575061209583612403565b1561209f57505050565b6001600160a01b0383166000908152601260205260408120600181015490919081036120df57600060028301556010546003830155426004830155612117565b60018201546120ee9042612760565b82549091506120fe908290612773565b82600201600082825461211191906127ac565b90915550505b600083600181111561212b5761212b6127f5565b0361214f57838260000160008282546121449190612760565b909155506121699050565b8382600001600082825461216391906127ac565b90915550505b5042600190910155505050565b6060610b9f83836000612433565b600e546000906121949042612760565b600f549091506121a5908290612773565b601080546000906121b79084906127ac565b90915550506001600160a01b0384166122375760008260018111156121de576121de6127f5565b036122035782600d60000160008282546121f891906127ac565b909155506122379050565b6001826001811115612217576122176127f5565b036122375782600d60000160008282546122319190612760565b90915550505b600061224285612403565b905080801561226857506001600160a01b03851660009081526012602052604090205415155b15612355576000836001811115612281576122816127f5565b036122c7576001600160a01b0385166000908152601260205260409020546122aa908590612760565b600f80546000906122bc908490612760565b9091555061231c9050565b60018360018111156122db576122db6127f5565b0361231c576001600160a01b0385166000908152601260205260409020546123049085906127ac565b600f8054600090612316908490612760565b90915550505b6001600160a01b0385166000908152601260205260408120818155600181018290556002810182905560038101829055600401556123f8565b6000836001811115612369576123696127f5565b14801561238457506001600160a01b03851615806123845750805b156123a95783600d600201600082825461239e91906127ac565b909155506123f89050565b60018360018111156123bd576123bd6127f5565b1480156123d857506001600160a01b03851615806123d85750805b156123f85783600d60020160008282546123f29190612760565b90915550505b505042600e55505050565b6001600160a01b03811660009081526011602052604081205460ff161561242c57506000919050565b503b151590565b6060814710156124585760405163cd78605960e01b8152306004820152602401610c22565b600080856001600160a01b03168486604051612474919061280b565b60006040518083038185875af1925050503d80600081146124b1576040519150601f19603f3d011682016040523d82523d6000602084013e6124b6565b606091505b50915091506124c68683836124d0565b9695505050505050565b6060826124e5576124e082612545565b610b9f565b81511580156124fc57506001600160a01b0384163b155b1561253e576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610c22565b5080610b9f565b8051156125555780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60005b83811015612589578181015183820152602001612571565b50506000910152565b60208152600082518060208401526125b181604085016020870161256e565b601f01601f19169190910160400192915050565b80356001600160a01b03811681146125dc57600080fd5b919050565b600080604083850312156125f457600080fd5b6125fd836125c5565b946020939093013593505050565b8015158114610c3457600080fd5b6000806040838503121561262c57600080fd5b612635836125c5565b915060208301356126458161260b565b809150509250929050565b60006020828403121561266257600080fd5b610b9f826125c5565b60008060006060848603121561268057600080fd5b612689846125c5565b9250612697602085016125c5565b9150604084013590509250925092565b6000602082840312156126b957600080fd5b5035919050565b6000602082840312156126d257600080fd5b8135610b9f8161260b565b600080604083850312156126f057600080fd5b6126f9836125c5565b9150612707602084016125c5565b90509250929050565b600181811c9082168061272457607f821691505b60208210810361274457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156109f6576109f661274a565b80820281158282048414176109f6576109f661274a565b6000826127a757634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156109f6576109f661274a565b6000602082840312156127d157600080fd5b5051919050565b6000602082840312156127ea57600080fd5b8151610b9f8161260b565b634e487b7160e01b600052602160045260246000fd5b6000825161281d81846020870161256e565b919091019291505056fea26469706673582212209f51a0ce4eaa318f984379ed7d3727ed27b2143fd635e692b3f43d8177b2cfae64736f6c63430008170033",
  "deployedBytecode": "0x6080604052600436106102fd5760003560e01c806393dd451e1161018f578063c3b754dc116100e1578063e34735801161008a578063f4f3b20011610064578063f4f3b200146108f0578063f89b764414610910578063fed1280b1461093057600080fd5b8063e347358014610890578063eb45261a146108b0578063f2fde38b146108d057600080fd5b8063d87744cf116100bb578063d87744cf1461082d578063dd62ed3e14610835578063e086e5ec1461087b57600080fd5b8063c3b754dc146107b9578063ccdfff53146107d9578063d34fd412146107f957600080fd5b8063a11a1add11610143578063b77cf9c61161011d578063b77cf9c614610740578063b89fc89e14610779578063c0973eed1461079957600080fd5b8063a11a1add146106df578063a9059cbb14610700578063a9c8d4881461072057600080fd5b80639b19251a116101745780639b19251a146106795780639bdd940c146106a9578063a0712d68146106bf57600080fd5b806393dd451e1461064457806395d89b411461066457600080fd5b806337fb7e211161025357806370a08231116101fc5780638da5cb5b116101d65780638da5cb5b146105fb578063918f8674146106195780639358928b1461062f57600080fd5b806370a0823114610590578063715018a6146105c65780638906758d146105db57600080fd5b806347786d371161022d57806347786d371461053b5780634fbee1241461055b5780636aae22031461057057600080fd5b806337fb7e211461049f578063391feebb146104d75780633bcfc4b81461050757600080fd5b80632260b83e116102b5578063343959b41161028f578063343959b41461044a578063355274ea1461046a5780633610724e1461047f57600080fd5b80632260b83e146103bb57806323b872dd1461040e578063313ce5671461042e57600080fd5b8063095ea7b3116102e6578063095ea7b31461035a5780630d392cd91461037a57806318160ddd1461039c57600080fd5b806302ce58131461030257806306fdde0314610338575b600080fd5b34801561030e57600080fd5b5060085461032390600160a81b900460ff1681565b60405190151581526020015b60405180910390f35b34801561034457600080fd5b5061034d610950565b60405161032f9190612592565b34801561036657600080fd5b506103236103753660046125e1565b6109e2565b34801561038657600080fd5b5061039a610395366004612619565b6109fc565b005b3480156103a857600080fd5b506002545b60405190815260200161032f565b3480156103c757600080fd5b506103db6103d6366004612650565b610a64565b60405161032f91908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b34801561041a57600080fd5b5061032361042936600461266b565b610b80565b34801561043a57600080fd5b506040516012815260200161032f565b34801561045657600080fd5b5061039a610465366004612650565b610ba6565b34801561047657600080fd5b506005546103ad565b34801561048b57600080fd5b5061039a61049a3660046126a7565b610c37565b3480156104ab57600080fd5b506008546104bf906001600160a01b031681565b6040516001600160a01b03909116815260200161032f565b3480156104e357600080fd5b506103236104f2366004612650565b60116020526000908152604090205460ff1681565b34801561051357600080fd5b506103ad7f000000000000000000000000000000000000000000000000000000000000000081565b34801561054757600080fd5b5061039a6105563660046126a7565b610d7f565b34801561056757600080fd5b506103ad610dc7565b34801561057c57600080fd5b5061039a61058b366004612650565b610dfd565b34801561059c57600080fd5b506103ad6105ab366004612650565b6001600160a01b031660009081526020819052604090205490565b3480156105d257600080fd5b5061039a610e30565b3480156105e757600080fd5b5061039a6105f6366004612650565b610e44565b34801561060757600080fd5b506006546001600160a01b03166104bf565b34801561062557600080fd5b506103ad6103e881565b34801561063b57600080fd5b50600f546103ad565b34801561065057600080fd5b5061039a61065f3660046126a7565b610e77565b34801561067057600080fd5b5061034d610f57565b34801561068557600080fd5b50610323610694366004612650565b600a6020526000908152604090205460ff1681565b3480156106b557600080fd5b506103ad60095481565b3480156106cb57600080fd5b5061039a6106da3660046126a7565b610f66565b3480156106eb57600080fd5b5060085461032390600160a01b900460ff1681565b34801561070c57600080fd5b5061032361071b3660046125e1565b610fe6565b34801561072c57600080fd5b5061039a61073b3660046126a7565b610ff4565b34801561074c57600080fd5b506103ad61075b366004612650565b6001600160a01b031660009081526012602052604090206004015490565b34801561078557600080fd5b5061039a610794366004612650565b6110a7565b3480156107a557600080fd5b50600b546104bf906001600160a01b031681565b3480156107c557600080fd5b5061039a6107d43660046126c0565b611106565b3480156107e557600080fd5b5061039a6107f43660046126c0565b6111a7565b34801561080557600080fd5b506103ad7f000000000000000000000000000000000000000000000000000000000000000081565b61039a611248565b34801561084157600080fd5b506103ad6108503660046126dd565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561088757600080fd5b5061039a6113e8565b34801561089c57600080fd5b506103ad6108ab366004612650565b61148b565b3480156108bc57600080fd5b5061039a6108cb366004612619565b611496565b3480156108dc57600080fd5b5061039a6108eb366004612650565b6114ca565b3480156108fc57600080fd5b5061039a61090b366004612650565b61151e565b34801561091c57600080fd5b50600c546104bf906001600160a01b031681565b34801561093c57600080fd5b506103ad61094b366004612650565b61164d565b60606003805461095f90612710565b80601f016020809104026020016040519081016040528092919081815260200182805461098b90612710565b80156109d85780601f106109ad576101008083540402835291602001916109d8565b820191906000526020600020905b8154815290600101906020018083116109bb57829003601f168201915b5050505050905090565b6000336109f0818585611729565b60019150505b92915050565b610a0461173b565b6001600160a01b0382166000818152600a6020908152604091829020805460ff191685151590811790915591519182527ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d91015b60405180910390a25050565b610a8f6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000610a9a83611781565b6001600160a01b03841660009081526012602052604081206004015491925090610ac49042612760565b90506000610ad86103e86301e13380612773565b8284610b247f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612760565b610b2e9190612773565b610b389190612773565b610b42919061278a565b90506000610b50848461183c565b90506040518060800160405280600081526020018381526020018281526020016000815250945050505050919050565b600033610b8e85828561191a565b610b998585856119b1565b60019150505b9392505050565b600b546001600160a01b03163314610c2b5760405162461bcd60e51b815260206004820152603560248201527f526577617264733a204f6e6c79207265776172647320636f6e7472616374206360448201527f616e2063616c6c20746869732066756e6374696f6e000000000000000000000060648201526084015b60405180910390fd5b610c3481611a29565b50565b600854600160a01b900460ff16610c905760405162461bcd60e51b815260206004820152601c60248201527f4162737472616374204c53543a20627579206e6f7420616374697665000000006044820152606401610c22565b600854600160a81b900460ff1615610d1157336000908152600a602052604090205460ff16610d115760405162461bcd60e51b815260206004820152602760248201527f4162737472616374204c53543a2063616c6c6572206973206e6f742077686974604482015266195b1a5cdd195960ca1b6064820152608401610c22565b60405162461bcd60e51b815260206004820152602760248201527f516574683a20427579696e67207769746820746f6b656e73206973206e6f742060448201527f616c6c6f776564000000000000000000000000000000000000000000000000006064820152608401610c22565b610d8761173b565b610d9081600555565b6040518181527fb42dbc56569dad594f79a8fa479f0b9b87b68602d1b8fc221d10b62bf703dbed906020015b60405180910390a150565b600e546000908190610dd99042612760565b600f54909150610dea908290612773565b601054610df791906127ac565b91505090565b610e0561173b565b600c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b610e3861173b565b610e426000611a67565b565b610e4c61173b565b600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b600b546001600160a01b03163314610ef75760405162461bcd60e51b815260206004820152603560248201527f526577617264733a204f6e6c79207265776172647320636f6e7472616374206360448201527f616e2063616c6c20746869732066756e6374696f6e00000000000000000000006064820152608401610c22565b610f0081611ac6565b15610f4d5760405162461bcd60e51b815260206004820152601660248201527f516574683a204d696e74206578636565647320636170000000000000000000006044820152606401610c22565b610c343382611ae6565b60606004805461095f90612710565b600b546001600160a01b03163314610f4d5760405162461bcd60e51b815260206004820152603560248201527f526577617264733a204f6e6c79207265776172647320636f6e7472616374206360448201527f616e2063616c6c20746869732066756e6374696f6e00000000000000000000006064820152608401610c22565b6000336109f08185856119b1565b610ffc61173b565b600081116110725760405162461bcd60e51b815260206004820152602560248201527f4d696e20616d6f756e7420627579206d7573742062652067726561746572207460448201527f68616e20300000000000000000000000000000000000000000000000000000006064820152608401610c22565b60098190556040518181527f4d02ac2bfe90115b91d59c32ad6d07ea86d935aedb62055d844decbc0a6cb47190602001610dbc565b6110af61173b565b6008805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f8125853d25d6f68e074fb323e9f6e68b582733c9f03a78a2fda62e81d5d594f490600090a250565b61110e61173b565b6008805482158015600160a81b027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff909216919091179091556111795760405133907fe17ac05ff4095c2a1b270ddc6f70ea762311620bf4be3b1c2b0a9f4d5b16a53390600090a250565b60405133907f5a5fb1bb60b955fafbedf12a782cf1135ba3f37b851d547e79c04e55d1d9a2bb90600090a250565b6111af61173b565b6008805482158015600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9092169190911790915561121a5760405133907f414deba86f382e3da8ecf26ff472fe712d2e8489ed191afbb662b3d720cb4b4590600090a250565b60405133907fb474c7aee2343d3d4a0a18ecf7798a53688ce4d25cab70fbad7ea88866e881a590600090a250565b600854600160a01b900460ff166112a15760405162461bcd60e51b815260206004820152601c60248201527f4162737472616374204c53543a20627579206e6f7420616374697665000000006044820152606401610c22565b600854600160a81b900460ff161561132257336000908152600a602052604090205460ff166113225760405162461bcd60e51b815260206004820152602760248201527f4162737472616374204c53543a2063616c6c6572206973206e6f742077686974604482015266195b1a5cdd195960ca1b6064820152608401610c22565b3461132c81611ac6565b156113795760405162461bcd60e51b815260206004820152601560248201527f516574683a2042757920657863656564732063617000000000000000000000006044820152606401610c22565b6009543410156113cb5760405162461bcd60e51b815260206004820152601d60248201527f516574683a20496e73756666696369656e742062757920616d6f756e740000006044820152606401610c22565b6113d53382611ae6565b6113de34611b1c565b610c343382611c26565b6113f061173b565b60006114046006546001600160a01b031690565b6001600160a01b0316036114705760405162461bcd60e51b815260206004820152602d60248201527f41627374726163744c53543a206f776e65722063616e6e6f742062652074686560448201526c207a65726f206164647265737360981b6064820152608401610c22565b610e426114856006546001600160a01b031690565b47611c70565b60006109f682611781565b61149e61173b565b6001600160a01b0382166000908152601160205260409020805460ff19168215151790555050565b5050565b6114d261173b565b6001600160a01b038116611515576040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152602401610c22565b610c3481611a67565b61152661173b565b600061153a6006546001600160a01b031690565b6001600160a01b0316036115a65760405162461bcd60e51b815260206004820152602d60248201527f41627374726163744c53543a206f776e65722063616e6e6f742062652074686560448201526c207a65726f206164647265737360981b6064820152608401610c22565b610c346115bb6006546001600160a01b031690565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015611618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163c91906127bf565b6001600160a01b0384169190611d07565b6001600160a01b0381166000908152601260209081526040808320815160a0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600401546080820181905282906116ad9042612760565b9050600081116116ff5760405162461bcd60e51b815260206004820152601860248201527f526577617264733a20436c61696d2074696d65206973203000000000000000006044820152606401610c22565b80826060015161170d610dc7565b6117179190612760565b611721919061278a565b949350505050565b6117368383836001611d87565b505050565b6006546001600160a01b03163314610e42576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610c22565b6001600160a01b0381166000908152601260209081526040808320815160a0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600401546080820181905282906117e19042612760565b9050806000036117f5575060009392505050565b60008260200151426118079190612760565b90508181846000015161181a9190612773565b846040015161182991906127ac565b611833919061278a565b95945050505050565b600080600c60009054906101000a90046001600160a01b03166001600160a01b0316638df7756f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b691906127bf565b9050806118c96103e86301e13380612773565b6118d39190612773565b836118fe867f0000000000000000000000000000000000000000000000000000000000000000612773565b6119089190612773565b61171790670de0b6b3a7640000612773565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146119ab578181101561199c576040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024810182905260448101839052606401610c22565b6119ab84848484036000611d87565b50505050565b6001600160a01b0383166119f4576040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260006004820152602401610c22565b6001600160a01b038216611a1e5760405163ec442f0560e01b815260006004820152602401610c22565b611736838383611e8e565b6001600160a01b0381166000908152601260205260408120426004820181905560018201556002810191909155611a5e610dc7565b60039091015550565b600680546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060055482611ad560025490565b611adf91906127ac565b1192915050565b6001600160a01b038216611b105760405163ec442f0560e01b815260006004820152602401610c22565b6114c660008383611e8e565b6008546001600160a01b0316611b9a5760405162461bcd60e51b815260206004820152602960248201527f4162737472616374204c53543a206469737472696275746f722061646472657360448201527f73206e6f742073657400000000000000000000000000000000000000000000006064820152608401610c22565b60008111611c105760405162461bcd60e51b815260206004820152602b60248201527f4162737472616374204c53543a20616d6f756e74206d7573742062652067726560448201527f61746572207468616e20300000000000000000000000000000000000000000006064820152608401610c22565b600854610c34906001600160a01b031682611c70565b816001600160a01b03167f0a37b72bb67eee30e09084cf386f8a17817c57f620c3ab95fb25d6a20356ec7782611c5b60025490565b60408051928352602083019190915201610a58565b80471015611c935760405163cd78605960e01b8152306004820152602401610c22565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611ce0576040519150601f19603f3d011682016040523d82523d6000602084013e611ce5565b606091505b505090508061173657604051630a12f52160e11b815260040160405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611736908490611eb1565b6001600160a01b038416611dca576040517fe602df0500000000000000000000000000000000000000000000000000000000815260006004820152602401610c22565b6001600160a01b038316611e0d576040517f94280d6200000000000000000000000000000000000000000000000000000000815260006004820152602401610c22565b6001600160a01b03808516600090815260016020908152604080832093871683529290522082905580156119ab57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051611e8091815260200190565b60405180910390a350505050565b611e99838383611f2d565b611ea583826000612070565b61173682826001612070565b6000611ec66001600160a01b03841683612176565b90508051600014158015611eeb575080806020019051810190611ee991906127d8565b155b15611736576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610c22565b6001600160a01b038316611f58578060026000828254611f4d91906127ac565b90915550611fe39050565b6001600160a01b03831660009081526020819052604090205481811015611fc4576040517fe450d38c0000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024810182905260448101839052606401610c22565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b038216611fff5760028054829003905561201e565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161206391815260200190565b60405180910390a3505050565b61207b838383612184565b6001600160a01b0383161580612095575061209583612403565b1561209f57505050565b6001600160a01b0383166000908152601260205260408120600181015490919081036120df57600060028301556010546003830155426004830155612117565b60018201546120ee9042612760565b82549091506120fe908290612773565b82600201600082825461211191906127ac565b90915550505b600083600181111561212b5761212b6127f5565b0361214f57838260000160008282546121449190612760565b909155506121699050565b8382600001600082825461216391906127ac565b90915550505b5042600190910155505050565b6060610b9f83836000612433565b600e546000906121949042612760565b600f549091506121a5908290612773565b601080546000906121b79084906127ac565b90915550506001600160a01b0384166122375760008260018111156121de576121de6127f5565b036122035782600d60000160008282546121f891906127ac565b909155506122379050565b6001826001811115612217576122176127f5565b036122375782600d60000160008282546122319190612760565b90915550505b600061224285612403565b905080801561226857506001600160a01b03851660009081526012602052604090205415155b15612355576000836001811115612281576122816127f5565b036122c7576001600160a01b0385166000908152601260205260409020546122aa908590612760565b600f80546000906122bc908490612760565b9091555061231c9050565b60018360018111156122db576122db6127f5565b0361231c576001600160a01b0385166000908152601260205260409020546123049085906127ac565b600f8054600090612316908490612760565b90915550505b6001600160a01b0385166000908152601260205260408120818155600181018290556002810182905560038101829055600401556123f8565b6000836001811115612369576123696127f5565b14801561238457506001600160a01b03851615806123845750805b156123a95783600d600201600082825461239e91906127ac565b909155506123f89050565b60018360018111156123bd576123bd6127f5565b1480156123d857506001600160a01b03851615806123d85750805b156123f85783600d60020160008282546123f29190612760565b90915550505b505042600e55505050565b6001600160a01b03811660009081526011602052604081205460ff161561242c57506000919050565b503b151590565b6060814710156124585760405163cd78605960e01b8152306004820152602401610c22565b600080856001600160a01b03168486604051612474919061280b565b60006040518083038185875af1925050503d80600081146124b1576040519150601f19603f3d011682016040523d82523d6000602084013e6124b6565b606091505b50915091506124c68683836124d0565b9695505050505050565b6060826124e5576124e082612545565b610b9f565b81511580156124fc57506001600160a01b0384163b155b1561253e576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610c22565b5080610b9f565b8051156125555780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60005b83811015612589578181015183820152602001612571565b50506000910152565b60208152600082518060208401526125b181604085016020870161256e565b601f01601f19169190910160400192915050565b80356001600160a01b03811681146125dc57600080fd5b919050565b600080604083850312156125f457600080fd5b6125fd836125c5565b946020939093013593505050565b8015158114610c3457600080fd5b6000806040838503121561262c57600080fd5b612635836125c5565b915060208301356126458161260b565b809150509250929050565b60006020828403121561266257600080fd5b610b9f826125c5565b60008060006060848603121561268057600080fd5b612689846125c5565b9250612697602085016125c5565b9150604084013590509250925092565b6000602082840312156126b957600080fd5b5035919050565b6000602082840312156126d257600080fd5b8135610b9f8161260b565b600080604083850312156126f057600080fd5b6126f9836125c5565b9150612707602084016125c5565b90509250929050565b600181811c9082168061272457607f821691505b60208210810361274457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156109f6576109f661274a565b80820281158282048414176109f6576109f661274a565b6000826127a757634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156109f6576109f661274a565b6000602082840312156127d157600080fd5b5051919050565b6000602082840312156127ea57600080fd5b8151610b9f8161260b565b634e487b7160e01b600052602160045260246000fd5b6000825161281d81846020870161256e565b919091019291505056fea26469706673582212209f51a0ce4eaa318f984379ed7d3727ed27b2143fd635e692b3f43d8177b2cfae64736f6c63430008170033",
  "devdoc": {
    "author": "A Q T I S / @AQTIS-Team",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawERC20(address)": {
        "params": {
          "token": "The address of the ERC20 token to withdraw"
        }
      }
    },
    "title": "Quant Ethereum Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "withdrawERC20(address)": {
        "notice": "Allows the owner to withdraw any ERC20 token from the contract"
      },
      "withdrawETH()": {
        "notice": "Allows the owner to withdraw stuck ETH from the contract"
      }
    },
    "notice": "This contract handles tokenomics for qETH",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 307,
        "contract": "contracts/lst/Qeth.sol:Qeth",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 313,
        "contract": "contracts/lst/Qeth.sol:Qeth",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 315,
        "contract": "contracts/lst/Qeth.sol:Qeth",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 317,
        "contract": "contracts/lst/Qeth.sol:Qeth",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 319,
        "contract": "contracts/lst/Qeth.sol:Qeth",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 15151,
        "contract": "contracts/lst/Qeth.sol:Qeth",
        "label": "_cap",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 8,
        "contract": "contracts/lst/Qeth.sol:Qeth",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1700,
        "contract": "contracts/lst/Qeth.sol:Qeth",
        "label": "_status",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 9274,
        "contract": "contracts/lst/Qeth.sol:Qeth",
        "label": "distributionAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 9276,
        "contract": "contracts/lst/Qeth.sol:Qeth",
        "label": "buyActive",
        "offset": 20,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 9278,
        "contract": "contracts/lst/Qeth.sol:Qeth",
        "label": "whitelistActive",
        "offset": 21,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 9280,
        "contract": "contracts/lst/Qeth.sol:Qeth",
        "label": "minAmountBuy",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 9284,
        "contract": "contracts/lst/Qeth.sol:Qeth",
        "label": "whitelist",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10569,
        "contract": "contracts/lst/Qeth.sol:Qeth",
        "label": "rewardsAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 10572,
        "contract": "contracts/lst/Qeth.sol:Qeth",
        "label": "tokenPriceCalculator",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(ITokenPriceCalculator)8519"
      },
      {
        "astId": 10591,
        "contract": "contracts/lst/Qeth.sol:Qeth",
        "label": "_supply",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(Supply)10588_storage"
      },
      {
        "astId": 10595,
        "contract": "contracts/lst/Qeth.sol:Qeth",
        "label": "whitelistedContracts",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10628,
        "contract": "contracts/lst/Qeth.sol:Qeth",
        "label": "_userRecords",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_struct(UserRecord)10567_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ITokenPriceCalculator)8519": {
        "encoding": "inplace",
        "label": "contract ITokenPriceCalculator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserRecord)10567_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AbstractRewards.UserRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(UserRecord)10567_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Supply)10588_storage": {
        "encoding": "inplace",
        "label": "struct AbstractRewards.Supply",
        "members": [
          {
            "astId": 10581,
            "contract": "contracts/lst/Qeth.sol:Qeth",
            "label": "totalSupply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10583,
            "contract": "contracts/lst/Qeth.sol:Qeth",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10585,
            "contract": "contracts/lst/Qeth.sol:Qeth",
            "label": "currentCirculatingSupply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10587,
            "contract": "contracts/lst/Qeth.sol:Qeth",
            "label": "cumulativeCirculatingSupply",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserRecord)10567_storage": {
        "encoding": "inplace",
        "label": "struct AbstractRewards.UserRecord",
        "members": [
          {
            "astId": 10558,
            "contract": "contracts/lst/Qeth.sol:Qeth",
            "label": "userBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10560,
            "contract": "contracts/lst/Qeth.sol:Qeth",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10562,
            "contract": "contracts/lst/Qeth.sol:Qeth",
            "label": "cumulativeBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10564,
            "contract": "contracts/lst/Qeth.sol:Qeth",
            "label": "cumCirculatingSupplyLastClaim",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10566,
            "contract": "contracts/lst/Qeth.sol:Qeth",
            "label": "lastClaimTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}